PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX gist: <https://w3id.org/semanticarts/ns/ontology/gist/>
PREFIX qt: <https://ontologies.beesondouglas.com/questrade/>
PREFIX qt3: <https://triples.beesondouglas.com/questrade/>

PREFIX qtx: <https://taxonomies.beesondouglas.com/questrade/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX ofn: <http://www.ontotext.com/sparql/functions/>

SELECT DISTINCT ?bond_iri ?price ?effective_maturity_dt ?corra (?coupon * 100 AS ?coupon_) (SUM(?npv_coupon_val) AS ?coupons) (?coupons + MAX(?npv_principal) AS ?npv_total) (?npv_total/10 AS ?my_price) (?my_price-?price AS ?spread)
#SELECT DISTINCT ?bond_iri ?price ?effective_maturity_dt ?coupon_dt ?corra ?coupon_amt ?npv_coupon_val ?npv_principal
{

    VALUES (?cusip ?price ?ytm ?starting_coupon) { ('56501RAQ9' 104.958 0.03901 0.05409) }
    
    BIND(IRI(CONCAT(STR(qt3:),"_Bond_",?cusip)) AS ?bond_iri)
    BIND(NOW() AS ?purchase_dt)
    BIND("2033-03-10T00:00:00"^^xsd:dateTime AS ?maturity)
    BIND("P5Y0M0DT0H0M0S"^^xsd:duration AS ?five_years)
    BIND(?maturity - ?five_years AS ?earliest_call_dt)
#    BIND(0.02883 AS ?ytm)
#    BIND(104.861 AS ?price)
    # BIND(0.05409 AS ?starting_coupon)
#    VALUES ?corra { 0.1 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 10.0 }
    VALUES ?corra { 1.0 2.0 4.0 5.0 }
    BIND((1.85 + ?corra)/100 AS ?adjusted_coupon) # Canadian Overnight Repo RAte 
    BIND(1000 AS ?principal)
#    BIND(?principal * ?price/100 AS ?cost)
    BIND(?purchase_dt AS ?coupon_start_dt)
    
        # Assume a maximum of 15 years of coupon payments
    VALUES ?coupon_payment_period {
        "P0Y6M0DT0H0M0S"^^xsd:duration 
        "P1Y0M0DT0H0M0S"^^xsd:duration "P1Y6M0DT0H0M0S"^^xsd:duration 
        "P2Y0M0DT0H0M0S"^^xsd:duration "P2Y6M0DT0H0M0S"^^xsd:duration 
        "P3Y0M0DT0H0M0S"^^xsd:duration "P3Y6M0DT0H0M0S"^^xsd:duration 
        "P4Y0M0DT0H0M0S"^^xsd:duration "P4Y6M0DT0H0M0S"^^xsd:duration 
        "P5Y0M0DT0H0M0S"^^xsd:duration "P5Y6M0DT0H0M0S"^^xsd:duration 
        "P6Y0M0DT0H0M0S"^^xsd:duration "P6Y6M0DT0H0M0S"^^xsd:duration 
        "P7Y0M0DT0H0M0S"^^xsd:duration "P7Y6M0DT0H0M0S"^^xsd:duration 
        "P8Y0M0DT0H0M0S"^^xsd:duration "P8Y6M0DT0H0M0S"^^xsd:duration 
        "P9Y0M0DT0H0M0S"^^xsd:duration "P9Y6M0DT0H0M0S"^^xsd:duration 
        "P10Y0M0DT0H0M0S"^^xsd:duration "P10Y6M0DT0H0M0S"^^xsd:duration 
        "P11Y0M0DT0H0M0S"^^xsd:duration "P11Y6M0DT0H0M0S"^^xsd:duration 
        "P12Y0M0DT0H0M0S"^^xsd:duration "P12Y6M0DT0H0M0S"^^xsd:duration 
        "P13Y0M0DT0H0M0S"^^xsd:duration "P13Y6M0DT0H0M0S"^^xsd:duration 
        "P14Y0M0DT0H0M0S"^^xsd:duration "P14Y6M0DT0H0M0S"^^xsd:duration 
        "P15Y0M0DT0H0M0S"^^xsd:duration "P15Y6M0DT0H0M0S"^^xsd:duration 
    } #/values

    BIND(?coupon_start_dt + ?coupon_payment_period AS ?coupon_dt)
    
    VALUES ?post_callable {
        "P0Y0M0DT0H0M0S"^^xsd:duration
        "P0Y6M0DT0H0M0S"^^xsd:duration
        "P1Y0M0DT0H0M0S"^^xsd:duration
        "P2Y0M0DT0H0M0S"^^xsd:duration
        "P3Y0M0DT0H0M0S"^^xsd:duration
        "P4Y0M0DT0H0M0S"^^xsd:duration
        "P5Y0M0DT0H0M0S"^^xsd:duration
    }
    BIND(?earliest_call_dt + ?post_callable AS ?effective_maturity_dt)
    FILTER(?effective_maturity_dt >= ?coupon_dt && NOW() < ?coupon_dt)
    FILTER(?effective_maturity_dt <= NOW()+"P15Y6M0DT0H0M0S"^^xsd:duration)
    
    BIND(IF(?coupon_dt >= ?earliest_call_dt, ?adjusted_coupon, ?starting_coupon) AS ?coupon)    
    BIND(?coupon * ?principal /2 AS ?coupon_amt)

# Calculate number of semi-annual periods from today to maturity date    
    BIND(?effective_maturity_dt-?purchase_dt AS ?now_to_mat_duration)
    BIND(ofn:years-from-duration(?now_to_mat_duration) AS ?now_to_mat_years)
    BIND(ofn:months-from-duration(?now_to_mat_duration) AS ?now_to_mat_months)
    BIND(ofn:days-from-duration(?now_to_mat_duration) AS ?now_to_mat_days)
    BIND(?now_to_mat_years * 2 + ?now_to_mat_months / (12/2) + ?now_to_mat_days / (365/2) AS ?now_to_mat_semiannual_periods)

# Calculate number of periods from coupon date to maturity date, two ways: daily and semi-annual    
    BIND(?effective_maturity_dt-?coupon_dt AS ?coupon_remaining_diff)
    BIND(ofn:years-from-duration(?coupon_remaining_diff) AS ?coupon_to_mat_years)
    BIND(ofn:months-from-duration(?coupon_remaining_diff) AS ?coupon_to_mat_months)
    BIND(ofn:days-from-duration(?coupon_remaining_diff) AS ?coupon_to_mat_days)
    BIND(?coupon_to_mat_years*365 + ?coupon_to_mat_months*30 + ?coupon_to_mat_days AS ?coupon_to_mat_daysremaining)
    BIND(?coupon_to_mat_years*2 + ?coupon_to_mat_months/(12/2) + ?coupon_to_mat_days/(365/2) AS ?coupon_to_mat_semiannual_periods)

# Assume discount rate for NPV is the bond's stated YTM rate at the current price
    BIND(?ytm AS ?discount_rate)
    BIND(0.09/365 AS ?my_daily_return)
    BIND(?discount_rate/2 AS ?semiannual_discount)

# Calculate multiplier for the coupon dollar amount by compounding, two strategies:
    BIND(ofn:pow(1+?my_daily_return, ?coupon_to_mat_daysremaining) AS ?multiplier) # yield of reinvested past coupons
#    BIND(ofn:pow(1+?semiannual_discount, ?coupon_to_mat_semiannual_periods) AS ?multiplier) # yield of reinvested past coupons

# The demultiplier applies the discount rate in reverse to calculate NPV    
    BIND(ofn:pow(1+?semiannual_discount, ?now_to_mat_semiannual_periods) AS ?demultiplier)

# Each coupon is reinvested at the daily return rate which is 9% annualized, all the way to maturity
    BIND(?coupon_amt * ?multiplier AS ?coupon_future_val)
# Each coupon's accumulated value at maturity is then NPVd back to today, using the discount rate
    BIND(?coupon_future_val / ?demultiplier AS ?npv_coupon_val)
# The principal is returned at maturity but must be devalued to NPV using the discount rate
    BIND(?principal / ?demultiplier AS ?npv_principal)

} GROUP BY ?bond_iri ?price ?effective_maturity_dt ?corra ?coupon
